"use strict";

(function () {
    function r(e, n, t) {
        function o(i, f) {
            if (!n[i]) {
                if (!e[i]) {
                    var c = "function" == typeof require && require;if (!f && c) return c(i, !0);if (u) return u(i, !0);var a = new Error("Cannot find module '" + i + "'");throw a.code = "MODULE_NOT_FOUND", a;
                }var p = n[i] = { exports: {} };e[i][0].call(p.exports, function (r) {
                    var n = e[i][1][r];return o(n || r);
                }, p, p.exports, r, e, n, t);
            }return n[i].exports;
        }for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) {
            o(t[i]);
        }return o;
    }return r;
})()({ 1: [function (require, module, exports) {
        window.proxy = new Proxy({}, {
            get: function get(obj, prop) {
                return _get(obj, prop);
            },
            set: function set(obj, prop, value) {
                return _set(obj, prop, value);
            }
        });

        function _set(obj, prop, value) {
            obj[prop] = value;
            console.log(obj, prop, value);
            // for single values where we dont want to update the full template
            if (!obj._template && document.getElementById(prop)) {
                document.getElementById(prop).innerHTML = value;
                return true;
            }
            for (var i = 0; i < templates.length; i++) {
                if (!obj || !obj._template) break;
                if (obj._template.startsWith(templates[i])) {
                    if (!window[templates[i]]) return true;
                    window[templates[i]].outerHTML = template(templates[i] + '.html', proxy);
                    bind[templates[i]]();
                }
            }
            return true;
        }

        function _get(obj, prop) {
            if (prop == 'toJSON') return;
            if (!(prop in obj)) obj[prop] = new Proxy({ _template: prop }, {
                get: function get(obj, prop) {
                    return _get(obj, prop);
                },
                set: function set(obj, prop, value) {
                    return _set(obj, prop, value);
                }
            });

            return obj[prop];
        }

        var bind = {
            listcategories: function listcategories() {}
        };

        bind.listcategories();

        template.defaults.imports.percent = function (float) {
            return Math.round(10000 * float) / 100;
        };
        var templates = ['listcategories'];

        // load english language strings and start the render
        loadLang("en", function () {
            var html = '';
            for (var i = 0; i < templates.length; i++) {
                html += template(templates[i] + '.html', proxy);
            }document.getElementById('content').innerHTML = html;

            // init the topbar
            document.getElementById('navbar-container').innerHTML = template('navbar.html', proxy);
            var $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);
            if ($navbarBurgers.length > 0) {
                $navbarBurgers.forEach(function (el) {
                    el.addEventListener('click', function () {
                        var target = el.dataset.target;
                        var $target = document.getElementById(target);
                        el.classList.toggle('is-active');
                        $target.classList.toggle('is-active');
                    });
                });
            }
        });

        function loadLang(lang, cb) {
            var xmlhttp = new XMLHttpRequest();
            var url = "/locales/" + lang + ".json";

            xmlhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    var json = JSON.parse(this.responseText);
                    proxy.strings = json;
                    cb();
                }
            };
            xmlhttp.open("GET", url, true);
            xmlhttp.send();
        }
        window.Router = {
            routes: [],
            mode: null,
            root: '/',
            config: function config(options) {
                this.mode = options && options.mode && options.mode == 'history' && !!history.pushState ? 'history' : 'hash';
                this.root = options && options.root ? '/' + this.clearSlashes(options.root) + '/' : '/';
                return this;
            },
            getFragment: function getFragment() {
                var fragment = '';
                if (this.mode === 'history') {
                    fragment = this.clearSlashes(decodeURI(location.pathname + location.search));
                    fragment = fragment.replace(/\?(.*)$/, '');
                    fragment = this.root != '/' ? fragment.replace(this.root, '') : fragment;
                } else {
                    var match = window.location.href.match(/#(.*)$/);
                    fragment = match ? match[1] : '';
                }
                return this.clearSlashes(fragment);
            },
            clearSlashes: function clearSlashes(path) {
                return path.toString().replace(/\/$/, '').replace(/^\//, '');
            },
            add: function add(re, handler) {
                if (typeof re == 'function') {
                    handler = re;
                    re = '';
                }
                this.routes.push({ re: re, handler: handler });
                return this;
            },
            remove: function remove(param) {
                for (var i = 0, r; i < this.routes.length, r = this.routes[i]; i++) {
                    if (r.handler === param || r.re.toString() === param.toString()) {
                        this.routes.splice(i, 1);
                        return this;
                    }
                }
                return this;
            },
            flush: function flush() {
                this.routes = [];
                this.mode = null;
                this.root = '/';
                return this;
            },
            check: function check(f) {
                var fragment = f || this.getFragment();
                for (var i = 0; i < this.routes.length; i++) {
                    var match = fragment.match(this.routes[i].re);
                    if (match) {
                        match.shift();
                        this.routes[i].handler.apply({}, match);
                        return this;
                    }
                }
                return this;
            },
            listen: function listen() {
                var self = this;
                var current = self.getFragment();
                var fn = function fn() {
                    if (current !== self.getFragment()) {
                        current = self.getFragment();
                        self.check(current);
                    }
                };
                clearInterval(this.interval);
                this.interval = setInterval(fn, 50);
                return this;
            },
            navigate: function navigate(path) {
                console.log(path);
                path = path ? path : '';
                if (this.mode === 'history') {
                    history.pushState(null, null, this.root + this.clearSlashes(path));
                } else {
                    window.location.href = window.location.href.replace(/#(.*)$/, '') + '#' + path;
                }
                return this;
            }

            // configuration
        };Router.config({ mode: 'hash' });

        // returning the user to the initial state
        Router.navigate(Router.getFragment());

        // adding routes
        Router.add(/about/, function () {
            console.log('about');
        }).add(/products\/(.*)\/edit\/(.*)/, function () {
            console.log('products', arguments);
        }).add(function () {
            console.log('default page (most likely 404)');
        });

        // forwarding
        //Router.navigate('/about');
    }, {}] }, {}, [1]);

